apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: kong
    name: kong
  spec:
    ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
    - name: "8001"
      port: 8001
      targetPort: 8001
    selector:
      io.kompose.service: kong
    type: LoadBalancer
    clusterIP: 10.98.30.90
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: kong
    name: kong
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kong
    strategy: {}
    template:
      metadata:
        name: kong
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: kong
      spec:
        containers:
        - env:
          - name: KONG_ADMIN_LISTEN
            value: 0.0.0.0:8001
          - name: KONG_DATABASE
            value: postgres
          - name: KONG_PG_HOST
            value: kong-database
          - name: KONG_PG_PASSWORD
            value: password
          - name: KONG_PG_USER
            value: kong
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000
          image: kong:2.0.4
          imagePullPolicy: ""
          name: kong
          ports:
          - containerPort: 8000
          - containerPort: 8001
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: kong-database
    name: kong-database
  spec:
    ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
    selector:
      io.kompose.service: kong-database
    clusterIP: 10.98.30.91
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: kong-database
    name: kong-database
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kong-database
    strategy:
      type: Recreate
    template:
      metadata:
        name: kong-database
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: kong-database
      spec:
        containers:
        - env:
          - name: POSTGRES_DB
            value: kong
          - name: POSTGRES_PASSWORD
            value: password
          - name: POSTGRES_USER
            value: kong
          image: postgres:9.6
          imagePullPolicy: ""
          livenessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - kong
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          name: kong-database
          ports:
          - containerPort: 5432
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: pgdata
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pgdata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: pgdata
    name: pgdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: konga
    name: konga
  spec:
    ports:
    - name: "1337"
      port: 1337
      targetPort: 1337
    selector:
      io.kompose.service: konga
    clusterIP: 10.98.30.92
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: konga
    name: konga
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: konga
    strategy:
      type: Recreate
    template:
      metadata:
        name: konga
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: konga
      spec:
        containers:
        - env:
          - name: DB_ADAPTER
            value: postgres
          - name: DB_DATABASE
            value: konga_db
          - name: DB_HOST
            value: kong-database
          - name: DB_PASSWORD
            value: password
          - name: DB_USER
            value: kong
          image: pantsel/konga
          imagePullPolicy: ""
          name: konga
          ports:
          - containerPort: 1337
          resources: {}
          volumeMounts:
          - mountPath: /app/kongadata
            name: kongadata
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: kongadata
          persistentVolumeClaim:
            claimName: kongadata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: kongadata
    name: kongadata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: rabbitmq
    name: rabbitmq
  spec:
    ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    - name: "15672"
      port: 15672
      targetPort: 15672
    selector:
      io.kompose.service: rabbitmq
    clusterIP: 10.98.30.93
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      io.kompose.network/playfoo: "true"
      io.kompose.service: kong-migration
    name: kong-migration
  spec:
    containers:
    - args:
      - kong
      - migrations
      - bootstrap
      env:
      - name: KONG_DATABASE
        value: postgres
      - name: KONG_PG_HOST
        value: kong-database
      - name: KONG_PG_PASSWORD
        value: password
      - name: KONG_PG_USER
        value: kong
      image: kong:2.0.4
      name: kong-migration
      resources: {}
    restartPolicy: OnFailure
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: rabbitmq
    name: rabbitmq
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: rabbitmq
    strategy:
      type: Recreate
    template:
      metadata:
        name: rabbitmq
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: rabbitmq
      spec:
        containers:
        - image: rabbitmq:3-management
          imagePullPolicy: ""
          name: rabbitmq
          ports:
          - containerPort: 5672
          - containerPort: 15672
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbitmq-data
        hostname: playfoo-rabbit
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: rabbitmq-data
    name: rabbitmq-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: mysql-database
    name: mysql-database
  spec:
    ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
    selector:
      io.kompose.service: mysql-database
    clusterIP: 10.98.30.94
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: mysql-database
    name: mysql-database
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mysql-database
    strategy:
      type: Recreate
    template:
      metadata:
        name: mysql-database
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: mysql-database
      spec:
        containers:
        - args:
          - --default-authentication-plugin=mysql_native_password
          env:
          - name: MYSQL_ROOT_PASSWORD
            value: admin
          - name: MYSQL_USER
            value: admin
          - name: MYSQL_PASSWORD
            value: admin
          image: mysql:latest
          imagePullPolicy: ""
          name: mysql-database
          ports:
          - containerPort: 3306
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/playfoo/data
            name: mysqldata
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mysqldata
          persistentVolumeClaim:
            claimName: mysqldata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      io.kompose.service: mysqldata
    name: mysqldata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: phpmyadmin
    name: phpmyadmin
  spec:
    ports:
    - name: "8082"
      port: 8082
      targetPort: 80
    selector:
      io.kompose.service: phpmyadmin
    clusterIP: 10.98.30.95
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: phpmyadmin
    name: phpmyadmin
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: phpmyadmin
    strategy: {}
    template:
      metadata:
        name: phpmyadmin
        labels:
          io.kompose.network/playfoo: "true"
          io.kompose.service: phpmyadmin
      spec:
        containers:
        - env:
          - name: MY_SQL_USER
            value: root
          - name: MY_SQL_PASSWORD
            value: admin
          - name: PMA_HOST
            value: mysql-database
          image: phpmyadmin/phpmyadmin:latest
          imagePullPolicy: ""
          name: phpmyadmin
          ports:
          - containerPort: 80
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
kind: List
metadata: {}